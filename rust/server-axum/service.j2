{# type=tags,filename=api/service/mod.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
{%- set strict_router = options.relaxedRouter is not defined -%}
{{ m::do_not_modify() }}
{%- if strict_router %}
use axum::{
    body::{Body, HttpBody},
    extract::{FromRequest, FromRequestParts, Request as ERequest},
    handler::{future::IntoServiceFuture, Handler},
    http::Request,
    response::{IntoResponse, Response},
    routing::{self, on_service, MethodFilter},
    Router, BoxError,
};
use futures::{future::LocalBoxFuture, Future};
use std::{
    convert::{Infallible, TryFrom},
    marker::PhantomData,
    pin::Pin,
    task::{Context, Poll},
};
use tower_service::Service;
mod endpoint;
pub use endpoint::*;

{%- else %}
use axum::{
    routing::{get, post, delete, patch, put, options, MethodRouter},
    handler::Handler,
    Router,
};
{%- endif %}

{%- for tag in tags %}

/// {{ tag.tag }} router
pub struct {{ tag.tag | pascalcase }}Router<S = ()> {
    pub(crate) router: Router<S>,
}

impl<S> {{ tag.tag | pascalcase }}Router<S> where S: Clone + Send + Sync + 'static {
    pub fn new() -> Self {
        Self {
            router: Router::new()
        }
    }

    {%- for endpoint in tag.endpoints %}

    /// {{ endpoint.method | upper }} {{ endpoint.path }}
    ///
    /// # Examples
    ///
    /// ```
    /// async fn handler({{ e::endpoint_parameters(endpoint = endpoint) | trim_end_matches(pat=",") }}) -> {{ endpoint.operation | pascalcase }}Response {
    ///     todo!();
    /// }
    /// let router = {{ tag.tag | pascalcase }}Router::default().{{ endpoint.operation | snakecase }}(handler);
    /// ```
    ///
    /// ```
    /// async fn handler({{ e::endpoint_parameters(endpoint = endpoint) | trim_end_matches(pat=",") }}, ...extractors) -> {{ endpoint.operation | pascalcase }}Response {
    ///     todo!();
    /// }
    /// let router = {{ tag.tag | pascalcase }}Router::default().{{ endpoint.operation | snakecase }}(handler);
    /// ```
    pub fn {{ endpoint.operation | snakecase }}<H, T>(mut self, handler: H) -> Self
        where
            H: {% if strict_router %}{{ endpoint.operation | pascalcase }}Handler<T, S> + Sync{% else %}Handler<T, S> + Clone + Send + Sync + 'static{% endif %},
            T: 'static
    {
        self.router = self.router.route("{{ endpoint.path }}", {% if strict_router -%}on_service(MethodFilter::{{ endpoint.method | upper }}, {{ endpoint.operation | pascalcase }}Service::new{%- else -%}{{ endpoint.method | lower }}{%- endif -%}(handler){% if strict_router %}){% endif %});
        self
    }
    {%- endfor %}
}

impl<S> Default for {{ tag.tag | pascalcase }}Router<S> where S: Clone + Send + Sync + 'static  {
    fn default() -> Self {
        Self::new()
    }
}

impl<S> From<{{ tag.tag | pascalcase }}Router<S>> for Router<S> {
    fn from(r: {{ tag.tag | pascalcase }}Router<S>) -> Self {
        r.router
    }
}

{%- endfor %}

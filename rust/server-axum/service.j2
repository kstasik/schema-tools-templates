{# type=tags,filename=api/service.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
{{ m::do_not_modify() }}

use axum::{
    routing::{get, post, delete, patch, put, options, MethodRouter},
    handler::Handler,
    Router,
};


{% for tag in tags %}
/// {{ tag.tag }} router
pub struct {{ tag.tag | pascalcase }}Router<S> {
	pub(crate) router: Router<S>,
}

impl <S>{{ tag.tag | pascalcase }}Router<S>
    where
    S: Clone + Send + Sync + 'static,
{
	pub fn new() -> Self {
		Self {
			router: Router::new()
		}
	}

	{% for endpoint in tag.endpoints %}
    /// {{ endpoint.method | upper }} {{ endpoint.path }}
    ///
    /// # Examples
    ///
    /// ```
    /// async fn handler({{ e::endpoint_parameters(endpoint = endpoint) | trim_end_matches(pat=",") }}) -> {{ endpoint.operation | pascalcase }}Response {
    ///     todo!();
    /// }
    /// let router = {{ tag.tag | pascalcase }}Router::default().{{ endpoint.operation | snakecase }}(handler);
    /// ```
    ///
    /// ```
    /// async fn handler({{ e::endpoint_parameters(endpoint = endpoint) | trim_end_matches(pat=",") }}, ...extractors) -> {{ endpoint.operation | pascalcase }}Response {
    ///     todo!();
    /// }
    /// let router = {{ tag.tag | pascalcase }}Router::default().{{ endpoint.operation | snakecase }}(handler);
    /// ```
	pub fn {{ endpoint.operation | snakecase }}<T: 'static>(mut self, handler: impl Handler<T, S> + Clone + Send + 'static) -> Self {
	{
        self.router = self.router.route("{{ endpoint.path | replace(from="{", to=":") | replace(from="}", to="") }}", {{ endpoint.method | lower }}(handler));
		self
	}
    }
	{% endfor %}
}

impl<S> Into<Router<S>> for {{ tag.tag | pascalcase }}Router<S>
    where
        S: Clone + Send + Sync + 'static {
    fn into(self) -> Router<S> {
        self.router
    }
}

{% endfor %}
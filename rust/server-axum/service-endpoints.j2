{# type=endpoints,filename=api/service/endpoint.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
{%- set strict_router = options.relaxedRouter is not defined -%}
{{ m::do_not_modify() }}
{%- if strict_router %}
use axum::{
    body::{Body, HttpBody},
    extract::{FromRequest, FromRequestParts, Request as ERequest},
    handler::{future::IntoServiceFuture, Handler},
    http::Request,
    response::{IntoResponse, Response},
    routing::{self, on_service, MethodFilter},
    Router, BoxError,
};
use futures::{future::LocalBoxFuture, Future};
use std::{
    convert::{Infallible, TryFrom},
    marker::PhantomData,
    pin::Pin,
    task::{Context, Poll},
};
use tower_service::Service;
use super::super::endpoint;

macro_rules! all_the_tuples {
    ($name:ident) => {
        $name!(T1);
        $name!(T1, T2);
        $name!(T1, T2, T3);
        $name!(T1, T2, T3, T4);
        $name!(T1, T2, T3, T4, T5);
    }
}

{% for endpoint in endpoints %}
{%- set skipped_headers = e::skipped_headers(endpoint=endpoint, options=options) | split(pat=" ") %}
{%- set filtered_headers = endpoint.parameters.header | filter_not_inarray(attribute="name", values=skipped_headers) %}
/// {{ endpoint.method | upper }} {{ endpoint.path }} handler
pub trait {{ endpoint.operation | pascalcase }}Handler<T, S, B = Body>: Clone + Send + Sized + 'static {
    fn call(
        self,
        req: ERequest,
        state: S
    ) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>>;
}

impl<F, Fut, S, B> {{ endpoint.operation | pascalcase }}Handler<(), S, B> for F
where
    F: FnOnce({{ e::endpoint_parameters(endpoint = endpoint, namespace = "super::super::") }}) -> Fut + Clone + Send + 'static,
    Fut: Future + Send,
    Fut::Output: Into<endpoint::{{ endpoint.operation | pascalcase }}Response>,
    {% if endpoint.requestbody.models.default -%}
    B: HttpBody + Send + 'static,
    B::Data: Send,
    B::Error: Into<BoxError>,
    {% else %}
    B: Send + 'static,
    {% endif %}
    S: Send + Sync + 'static,
{
    {%- set body = e::handler_definition_body(endpoint = endpoint, options = options, filtered_headers = filtered_headers, namespace = "super::super::") -%}
    {%- set body_fr = e::handler_definition_body_fr(endpoint = endpoint, options = options, filtered_headers = filtered_headers, namespace = "super::super::") -%}
    fn call(
        self,
        {% if not body and not body_fr %}_{% endif %}req: ERequest,
        state: S
    ) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>> {
        Box::pin(async move {
            {% if body or body_fr -%}
            let (mut parts, body) = req.into_parts();
            let state = &state;

{{ body }}
{{ body_fr }}
{%- endif %}

            let res = self(
                {%- filter trim_start_matches(pat=", ") -%}
                {{ e::handler_definition_parameters(endpoint = endpoint, options = options, filtered_headers = filtered_headers)}}, {% endfilter -%}
            ).await;

            let response: endpoint::{{ endpoint.operation | pascalcase }}Response = res.into();

            response.into()
        })
    }
}

macro_rules! {{ endpoint.operation | snakecase }}_handler {
    ( $($ty:ident),* $(,)? ) => {
        #[allow(non_snake_case)]
        impl<F, Fut, S, B, $($ty,)*> {{ endpoint.operation | pascalcase }}Handler<($($ty,)*), S, B> for F
        where
            F: FnOnce({{ e::endpoint_parameters(endpoint = endpoint, namespace = "super::super::") }}$($ty,)*) -> Fut + Clone + Send + 'static,
            Fut: Future + Send,
            Fut::Output: Into<endpoint::{{ endpoint.operation | pascalcase }}Response>,
            {%- if endpoint.requestbody.models.default -%}
            B: HttpBody + Send + 'static,
            B::Data: Send,
            B::Error: Into<BoxError>,
            {%- else %}
            B: Send + 'static,
            {%- endif %}
            S: Send + Sync + 'static,
            $( $ty: FromRequestParts<S> + Send,)*
        {
            fn call(self, req: ERequest, state: S) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>> {
                Box::pin(async move {
                    let (mut parts, body) = req.into_parts();
                    let state = &state;

                    {{ e::handler_definition_body(endpoint = endpoint, options = options, filtered_headers = filtered_headers, namespace = "super::super::") }}

                    $(
                        let $ty = match $ty::from_request_parts(&mut parts, state).await {
                            Ok(value) => value,
                            Err(rejection) => return rejection.into_response(),
                        };
                    )*


                    {{ e::handler_definition_body_fr(endpoint = endpoint, options = options, filtered_headers = filtered_headers, namespace = "super::super::") }}

                    let res = self({%- filter trim_start_matches(pat=", ") -%}
                        {{ e::handler_definition_parameters(endpoint = endpoint, options = options, filtered_headers = filtered_headers)}}, {% endfilter -%}
                        $($ty,)*).await;

                    let response: endpoint::{{ endpoint.operation | pascalcase }}Response = res.into();

                    response.into()
                })
            }
        }
    };
}

all_the_tuples!({{ endpoint.operation | snakecase }}_handler);

/// {{ endpoint.method | upper }} {{ endpoint.path }} service
pub struct {{ endpoint.operation | pascalcase }}Service<H, T, S>
where
    H: {{ endpoint.operation | pascalcase }}Handler<T, S> {
    handler: H,
    _marker: PhantomData<fn() -> (T, S)>,
}

impl<H, T, S> Clone for {{ endpoint.operation | pascalcase }}Service<H, T, S>
where
    H: {{ endpoint.operation | pascalcase }}Handler<T, S>
{
    fn clone(&self) -> Self {
        Self {
            handler: self.handler.clone(),
            _marker: PhantomData,
        }
    }
}

impl<H, T, S> {{ endpoint.operation | pascalcase }}Service<H, T, S>
where
    H: {{ endpoint.operation | pascalcase }}Handler<T, S> {
    pub fn new(handler: H) -> Self {
        Self {
            handler,
            _marker: PhantomData,
        }
    }
}

impl<H, T, S> Service<ERequest> for {{ endpoint.operation | pascalcase }}Service<H, T, S>
where
    H: {{ endpoint.operation | pascalcase }}Handler<T, S>,
    S: Send + Sync + 'static {
    type Response = Response;
    type Error = Infallible;
    type Future = Pin<Box<dyn Future<Output = Result<Self::Response, Self::Error>> + Send + 'static>>;

    #[inline]
    fn poll_ready(&mut self, _cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
        Poll::Ready(Ok(()))
    }

    fn call(&mut self, mut req: ERequest) -> Self::Future {
        let handler = self.handler.clone();

        Box::pin(async move {
            let state = req
                .extensions_mut()
                .remove::<S>()
                .expect("state extension missing. This is a bug in code schema-tools, please file an issue");

            Ok( {{ endpoint.operation | pascalcase }}Handler::call(handler, req, state).await)
        })
    }
}

{% endfor %}
{%- endif %}
{# type=tags,filename=api/endpoint.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
{{ m::do_not_modify() }}
use async_trait::async_trait;
use axum::{body::Body, http::{HeaderValue, Response, StatusCode}, response::IntoResponse, Json, http};
use garde::Validate;
use serde::{
    de::{self, IntoDeserializer},
    Deserialize,
};
use serde_qs::Error;
use std::fmt;
use axum::extract::FromRequestParts;
use axum::http::request::Parts;

{% set_global froms = [] %}
{% set_global froms_with_headers = [] %}


#[derive(Debug)]
pub struct FailedToDeserializeQuery(Error);

impl IntoResponse for FailedToDeserializeQuery {
    fn into_response(self) -> axum::response::Response {
        (http::StatusCode::BAD_REQUEST, self.0.to_string()).into_response()
    }
}

{% for tag in tags -%}
{%- for endpoint in tag.endpoints -%}
{% if endpoint.parameters.path | length > 0 -%}
/// {{ endpoint.method | upper }} {{ endpoint.path }}
/// path parameters
#[derive({% if not options.skipValidate %}Validate, {% endif %}Deserialize)]
pub struct {{ endpoint.operation | pascalcase }}Path{
	{%- for param in endpoint.parameters.path %}
    {{- m::model_validation(model = param.model, options = options, regex_path="super::model::") }}
	#[serde(rename = "{{ param.name }}"{% if property.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
	pub {{ m::property_name(name = param.name) }}: {{ m::type(property = param.model) }},
	{% endfor %}
}
{% endif -%}

{%- if endpoint.parameters.query | length > 0 %}
{% set object_query_params = endpoint.parameters.query | filter(attribute="model.type", value="object") | length == 0 %}
{% set object_all_optional = endpoint.parameters.query | filter(attribute="required", value=true) | length == 0 %}

/// {{ endpoint.method | upper }} {{ endpoint.path }}
/// query parameters
#[derive({% if not options.skipValidate %}Validate, {% endif %}Deserialize{% if object_all_optional %},Default{% endif %})]
pub struct {{ endpoint.operation | pascalcase }}Query{
	{%- for param in endpoint.parameters.query %}
	{%- if param.style == 'form' and param.explode == false %}
    {{ m::model_validation(model = param.model, options = options, is_required=param.required, regex_path="super::model::", style="form") }}
	#[serde(rename = "{{ param.name }}", deserialize_with = "deserialized_{% if not param.required %}opt_{% endif %}id_list"{% if property.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
	pub {{ m::property_name(name = param.name) }}: {% if not param.required %}Option<{% endif %}Vec<{{ m::type(property = param.model, ns = "super::model") }}{% if not param.required %}>{% endif %}>,
	{%- else %}
    {{ m::model_validation(model = param.model, options = options, is_required=param.required, regex_path="super::model::") }}
	#[serde(rename = "{{ param.name }}"{% if property.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
	pub {{ m::property_name(name = param.name) }}: {% if not param.required %}Option<{% endif %}{{ m::type(property = param.model, ns = "super::model") }}{% if not param.required %}>{% endif %},
	{%- endif %}
	{% endfor %}
}

{% endif -%}

{% set skipped_headers = e::skipped_headers(endpoint=endpoint, options=options) | split(pat=" ") %}
{% set filtered_headers = endpoint.parameters.header | filter_not_inarray(attribute="name", values=skipped_headers) %}
{%- if filtered_headers | length > 0 %}
/// {{ endpoint.method | upper }} {{ endpoint.path }}
/// request headers
#[derive({% if not options.skipValidate %}Validate, {% endif %}Deserialize)]
pub struct {{ endpoint.operation | pascalcase }}RequestHeaders{
	{%- for param in filtered_headers %}
    {{- m::model_validation(model = param.model, options = options, is_required=param.required, regex_path="super::model::") }}
	#[serde(rename = "{{ param.name }}"{% if property.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
	pub {{ m::property_name(name = param.name) }}: {% if not param.required %}Option<{% endif %}{{ m::type(property = param.model, ns = "super::model") }}{% if not param.required %}>{% endif %},
	{% endfor %}
}

impl std::convert::TryFrom<&axum::http::HeaderMap> for {{ endpoint.operation | pascalcase }}RequestHeaders {
    type Error = StatusCode;

    fn try_from(value: &axum::http::HeaderMap) -> Result<Self, Self::Error> {
        Ok(Self {
            {% for param in filtered_headers %}
            {{ m::property_name(name = param.name) }}: value.get("{{ param.name }}")
                .map(|hv| hv.to_str())
                .map_or(Ok(None), |v| v.map(Some))
                .map_err(|_| StatusCode::BAD_REQUEST)?
                .map(|s| s.to_string())
                {% if param.required %}.ok_or(StatusCode::BAD_REQUEST)?{% endif %},
            {% endfor %}
        })
    }
}
{% endif -%}

{% for response in endpoint.responses.all %}
{% set filtered_response_headers = response.headers | default(value=[]) | filter_not_inarray(attribute="name", values=skipped_headers) %}
{% if filtered_response_headers | length > 0 %}
/// {{ endpoint.method | upper }} {{ endpoint.path }}
/// response headers
#[derive(Deserialize)]
pub struct {{ endpoint.operation | pascalcase }}Response{{ response.statusCode }}Headers{
    {% for param in filtered_response_headers %}
	#[serde(rename = "{{ param.name }}"{% if property.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
	pub {{ m::property_name(name = param.name) }}: {% if not param.required %}Option<{% endif %}{{ m::type(property = param.model, ns = "super::model") }}{% if not param.required %}>{% endif %},
	{% endfor %}
}
{% endif %}
{% endfor %}

{% for response in endpoint.responses.all %}
{% set filtered_response_headers = response.headers | default(value=[]) | filter_not_inarray(attribute="name", values=skipped_headers) %}
{% if filtered_response_headers | length > 0 %}
{% if not response.models.default.model.model %}
{% elif froms_with_headers is not containing(response.models.default.model.model.name) %}
pub struct {{ m::type(property = response.models.default.model, ns = "") }}WithHeaders {
    pub body: {{ m::type(property = response.models.default.model, ns = "super::model") }},
    pub headers: {{ endpoint.operation | pascalcase }}Response{{ response.statusCode }}Headers
}

{% set_global froms_with_headers = froms_with_headers | concat(with=response.models.default.model.model.name) %}
{% endif %}
{% endif %}
{% endfor %}

pub enum {{ endpoint.operation | pascalcase }}Response {
	{% for response in endpoint.responses.all -%}
    {% set filtered_response_headers = response.headers | default(value=[]) | filter_not_inarray(attribute="name", values=skipped_headers) %}
    {%- if not response.models -%}
    Status{{ response.statusCode }}{% if filtered_response_headers | length > 0 %}({{ endpoint.operation | pascalcase }}Response{{ response.statusCode }}Headers){% endif %},
    {%- else -%}
	Status{{ response.statusCode }}({% if filtered_response_headers | length == 0 %}{{ m::type(property = response.models.default.model, ns = "super::model") }}{% else %}{{ m::type(property = response.models.default.model, ns = "") }}WithHeaders{% endif %}),
    {%- endif -%}
	{% endfor %}
}

impl IntoResponse for {{ endpoint.operation | pascalcase }}Response {
    fn into_response(self) -> axum::response::Response {
        self.into()
    }
}

impl From<{{ endpoint.operation | pascalcase }}Response> for Response<Body> {
    fn from(response: {{ endpoint.operation | pascalcase }}Response) -> Response<Body> {
			match response {
				{% for response in endpoint.responses.all %}
                {% set filtered_response_headers = response.headers | default(value=[]) | filter_not_inarray(attribute="name", values=skipped_headers) %}
				{{ endpoint.operation | pascalcase }}Response::Status{{ response.statusCode }}
                {%- if response.models -%}
                    (model) =>
                    {% if filtered_response_headers | length > 0 %}
                    {
                        let mut response = {{ e::into_response(response = response, name = "model.body") }};
                        let headers = response.headers_mut();

                        {% if filtered_response_headers | filter(attribute="required", value=true) | length > 0 %}
                        {% for param in filtered_response_headers | filter(attribute="required", value=true) %}
                        headers.insert("{{ param.name | lower }}", HeaderValue::from_str(&model.headers.{{ m::property_name(name = param.name) }}).unwrap());
                        {% endfor %};
                        {% endif %}

                        {% for param in filtered_response_headers | filter(attribute="required", value=false)  %}
                        if let Some(header) = model.headers.{{ m::property_name(name = param.name) }} {
                            headers.insert("{{ param.name | lower }}", HeaderValue::from_str(&header).unwrap());
                        }
                        {% endfor %}

                        response
                    }
                    {% else %}
                    {{ e::into_response(response = response, name = "model") }}
                    {% endif %}

                {%- elif filtered_response_headers | length > 0 %}(h) => {
                    let mut response = StatusCode::from_u16({{ response.statusCode }}).unwrap().into_response();
                    let headers = response.headers_mut();

                    {% if filtered_response_headers | filter(attribute="required", value=true) | length > 0 %}
                    {% for param in filtered_response_headers | filter(attribute="required", value=true) %}
                    headers.insert("{{ param.name | lower }}", HeaderValue::from_str(&h.{{ m::property_name(name = param.name) }}).unwrap());
                    {% endfor %};
                    {% endif %}

                    {% for param in filtered_response_headers | filter(attribute="required", value=false)  %}
                    if let Some(header) = h.{{ m::property_name(name = param.name) }} {
                        headers.insert("{{ param.name | lower }}", HeaderValue::from_str(&header).unwrap());
                    }
                    {% endfor %}

                    response
                }
                {%- else %} => StatusCode::from_u16({{ response.statusCode }}).unwrap().into_response(){% endif %},
				{% endfor %}
			}
    }
}


{% for response in endpoint.responses.all %}
{% set filtered_response_headers = response.headers | default(value=[]) | filter_not_inarray(attribute="name", values=skipped_headers) %}


{% for model in response.models.all | default(value=[]) | filter(attribute="isUnique", value=true) %}
{% if filtered_response_headers | length == 0 %}
impl From<{{ m::type(property = model.model, ns = "super::model") }}> for {{ endpoint.operation | pascalcase }}Response {
    fn from(data: {{ m::type(property = model.model, ns = "super::model") }}) -> Self {
        Self::Status{{ response.statusCode }}(
            data
        )
    }

}
{% endif %}
{% endfor %}

{% endfor %}
{% endfor %}
{% endfor %}



/// all convertable Result are acceptable
macro_rules! impl_from_result {
    ($t:ident) => {
        impl<O, E> From<Result<O, E>> for $t
        where
            O: Into<$t>,
            E: Into<$t>,
        {
            fn from(res: Result<O, E>) -> Self {
                match res {
                    Ok(r) => r.into(),
                    Err(e) => e.into(),
                }
            }
        }
    };
}

{% for tag in tags -%}
{% for endpoint in tag.endpoints %}
impl_from_result!({{ endpoint.operation | pascalcase }}Response);
{%- endfor %}
{%- endfor %}

/// custom deserializer for query parameters /users?id=3,4,5
/// style = form, explode = false according to https://swagger.io/docs/specification/serialization/
pub fn deserialized_id_list<'de, D, I>(deserializer: D) -> std::result::Result<Vec<I>, D::Error>
where
    D: de::Deserializer<'de>,
    I: de::DeserializeOwned,
{
    struct StringVecVisitor<I>(std::marker::PhantomData<I>);

    impl<'de, I> de::Visitor<'de> for StringVecVisitor<I>
    where I: de::DeserializeOwned {
        type Value = Vec<I>;

        fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
            formatter.write_str("a string containing a list")
        }

        fn visit_str<E>(self, v: &str) -> std::result::Result<Self::Value, E>
        where
            E: de::Error,
        {
            let mut ids = Vec::new();
            for id in v.split(',') {
                let id = I::deserialize(id.into_deserializer())?;
                ids.push(id);
            }
            Ok(ids)
        }
    }

    deserializer.deserialize_any(StringVecVisitor(std::marker::PhantomData::<I>))
}

pub fn deserialized_opt_id_list<'de, D, I>(deserializer: D) -> std::result::Result<Option<Vec<I>>, D::Error>
where
    D: de::Deserializer<'de>,
    I: de::DeserializeOwned,
{
    struct StringVecVisitor<I>(std::marker::PhantomData<I>);

    impl<'de, I> de::Visitor<'de> for StringVecVisitor<I>
    where I: de::DeserializeOwned {
        type Value = Option<Vec<I>>;

        fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
            formatter.write_str("a string containing a list")
        }

        fn visit_str<E>(self, v: &str) -> std::result::Result<Self::Value, E>
        where
            E: de::Error,
        {
            let mut ids = Vec::new();
            for id in v.split(',') {
                let id = I::deserialize(id.into_deserializer())?;
                ids.push(id);
            }
            Ok(Some(ids))
        }

        fn visit_none<E>(self) -> std::result::Result<Self::Value, E>
        where
            E: de::Error,
        {
            Ok(None)
        }
    }

    deserializer.deserialize_any(StringVecVisitor(std::marker::PhantomData::<I>))
}

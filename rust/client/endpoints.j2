{# type=tags,filename=%options.namespace%/endpoint.rs,min_version=0.2.0 #}
{%- import "macros.j2" as m -%}
{% import "extra.j2" as e -%}
{{ m::do_not_modify() }}
use serde::{de::{self, IntoDeserializer}, Deserialize, Serialize};
use std::fmt;
use reqwest::header::{HeaderName, HeaderValue};
use super::{ClientError, ApiError, ResponseProcessingError};
use std::future::Future;
use std::pin::Pin;
{% if formats is containing("date-time") or formats is containing("date") -%}
    use chrono::{DateTime, Utc};
{% endif %}


{% for tag in tags %}
{% set allowed_operations = e::allowed_operations(endpoints=tag.endpoints, options=options) | split(pat=" ") %}
{% set filtered_endpoints = tag.endpoints | filter_inarray(attribute="operation", values=allowed_operations) %}
{% for endpoint in filtered_endpoints %}
{% set skipped_headers = e::skipped_headers(endpoint=endpoint, options=options) | split(pat=" ") %}
{% set filtered_headers = endpoint.parameters.header | filter_not_inarray(attribute="name", values=skipped_headers) %}
//
// {{ endpoint.method }} {{ endpoint.path }}
//
#[derive(Debug)]
pub enum {{ endpoint.operation | pascalcase }}Error {
	{% for response in endpoint.responses.all  %}
    {% if response != endpoint.responses.success %}
	Error{{ response.statusCode }}({%- filter trim_start_matches(pat=", ") -%}
		{%- if not response.models -%}
		{%- else -%}
		{{ m::type(property = response.models.default.model, ns = "super::model") }}
		{%- endif -%}
		{% if response.headers | default(value=[]) | filter_not_inarray(attribute="name", values=skipped_headers) | length > 0 %}, reqwest::header::HeaderMap{% endif %}),
	{% endfilter %}
    {% endif %}
	{% endfor %}
}

impl ApiError for {{ endpoint.operation | pascalcase }}Error {
	fn extract(response: reqwest::Response) -> Pin<Box<dyn Future<Output = Result<Self, ResponseProcessingError>> + Send>> {
		Box::pin(async move {
			match response.status().as_u16() {
				{% for response in endpoint.responses.all  %}
				{% if response != endpoint.responses.success %}
				{{ response.statusCode }} => {% if response.headers | default(value=[]) | filter_not_inarray(attribute="name", values=skipped_headers) | length > 0 %} {
					let headers = response.headers().clone();

					{% if not response.models %}
					Ok(Self::Error{{ response.statusCode }}(headers))
					{% else %}
					{% if response.models.default.contentType == "text/plain" and response.models.default.model.type == "string" %}
					response.text()
					{% else %}
					response.json::<{{ m::type(property = response.models.default.model, ns = "super::model") }}>()
					{% endif %}
						.await
						.map(|d| Self::Error{{ response.statusCode }}(d, headers))
						.map_err(ResponseProcessingError::Deserialization)
					{% endif %}
				},
				{% else %}
					{% if not response.models %}
					Some(Self::Error{{ response.statusCode }}),
					{% else %}
					{% if response.models.default.contentType == "text/plain" and response.models.default.model.type == "string" %}
					response.text()
					{% else %}
					response.json::<{{ m::type(property = response.models.default.model, ns = "super::model") }}>()
					{% endif %}
					.await
					.map(Self::Error{{ response.statusCode }})
					.map_err(ResponseProcessingError::Deserialization),
					{% endif %}
				{% endif %}
				{% endif %}
				{% endfor %}
				_ => Err(ResponseProcessingError::NotSupported(response))
			}
		})
	}
}

{%- if filtered_headers | length > 0 %}
pub struct {{ endpoint.operation | pascalcase }}Headers{
	{%- for q in filtered_headers %}
	pub {{ m::property_name(name = q.name) }}: {% if not q.required %}Option<{% endif %}{{ m::type(property = q.model, ns = "super::model") }}{% if not q.required %}>{% endif %},
	{% endfor -%}
}

impl {{ endpoint.operation | pascalcase }}Headers {
	pub fn into_vec(self) -> Vec<(HeaderName, HeaderValue)> {
		vec![
			{%- for q in filtered_headers %}
			{% if q.required %}
			Some((HeaderName::from_static("{{ q.name | lower }}"), HeaderValue::from_bytes(self.{{ m::property_name(name = q.name) }}.as_ref()).unwrap())),
			{% else %}
			self.{{ m::property_name(name = q.name) }}.map(|v| (HeaderName::from_static("{{ q.name | lower }}"), HeaderValue::from_str({{ m::to_str(q = q.model, required = q.required, name = 'v') }}).unwrap())),
			{% endif %}
			{% endfor -%}
		]
		.iter()
		.filter_map(|f| f.clone())
		.collect::<Vec<_>>()
	}
}
{% endif %}

{% if not endpoint.responses.success.models or endpoint.responses.success.models.default.contentType is not starting_with("application/json") %}
#[derive(Debug)]
pub struct {{ endpoint.operation | pascalcase }}Response{
	pub response: reqwest::Response,
}

impl {{ endpoint.operation | pascalcase }}Response{
	pub fn from_response(response: reqwest::Response) -> Self {
		Self {
			response
		}
	}
}
{% endif %}

{%- if endpoint.parameters.query | length > 0 %}
#[derive(Serialize, Deserialize, {% if endpoint.parameters.query | filter(attribute="required", value=true) | length == 0 %}Default{% endif %})]
pub struct {{ endpoint.operation | pascalcase }}Query{
	{%- for q in endpoint.parameters.query %}
    #[serde(rename = "{{ q.name }}"{% if not q.required and q.nullable %}, deserialize_with = "optional_nullable"{% elif not q.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
	pub {{ m::property_name(name = q.name) }}: {% if not q.required %}Option<{% endif %}{% if q.model %}{{ m::type(property = q.model, ns = "super::model") }}{% elif q.model.enum %}{{ m::type(property = q.model.enum, ns = "super::model") }}{% endif %}{% if not q.required %}>{% endif %},
	{% endfor -%}
}
{% endif %}
{% endfor %}
{% endfor %}

{% import "macros.j2" as m -%}
{% import "extensions.j2" as e -%}
{# if wrappers include #}
{{ m::do_not_modify() }}
use serde::{Serialize, Deserialize, Deserializer};
use std::collections::BTreeMap;
{% if not options.skipValidate %}use garde::Validate;
use regex::Regex;
use once_cell::sync::Lazy;{% endif %}
{% block use %}{% endblock use %}

{% if formats is containing("decimal") %}
use rust_decimal::Decimal;
{% endif %}
{% if formats is containing("date-time") %}
use chrono::{DateTime, Utc};
{% endif %}

{% if not options.skipValidate %}
pub static UUID: Lazy<Regex> = Lazy::new(|| { Regex::new(r"^\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$").unwrap() });
pub static FLOAT: Lazy<Regex> = Lazy::new(|| { Regex::new(r"^[0-9\.]+$").unwrap() });
{% for regexp in regexps -%}
pub static {{ regexp.name | snakecase | upper }}: Lazy<Regex> = Lazy::new(|| { Regex::new(r"{{ regexp.pattern }}").unwrap() });
{% endfor %}
{% endif %}

{% for model in models %}
{%- if model.object %}
#[derive(Deserialize, Serialize, Debug,{% if not options.skipValidate %} Validate,{% endif %} Clone{% if model.object.properties | filter(attribute="required", value=true) | length == 0 %}, Default{% endif %})]
pub struct {{ m::model_name(name = model.object.name) }} {
    {%- set filtered_properties = model.object.properties | filter_not(attribute="type", value="const") -%}
    {% for property in filtered_properties -%}
    {{- m::model_validation(model = property, options = options) }}
    #[serde(rename = "{{ property.name }}"{% if not property.required and property.nullable %}, default, deserialize_with = "optional_nullable"{% elif not property.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
    pub {{ m::property_name(name = property.name) }}: {% if not property.required %}Option<{% endif %}{{ m::type(property = property) }}{% if not property.required %}>{% endif %},
    {%- endfor %}
}

impl {{ m::model_name(name = model.object.name) }} { {# if sort required first #}
    pub fn new({%- for property in filtered_properties -%}{{ m::property_name(name = property.name) }}: {% if not property.required %}Option<{% endif %}{{ m::type(property = property) }}{% if not property.required %}>{% endif %}, {% endfor %}) -> Self {
        Self {
            {% for property in filtered_properties %}{{ m::property_name(name = property.name) }},
            {% endfor %}
        }
    }

    {% for property in model.object.properties | filter(attribute="type", value="const") -%}
    // todo: add to serialization as static
    pub fn get_{{ m::property_name(name = property.name) }}(&self) -> {{ m::type(property = property.model) }} {
        {% if property.model.type == "string" %}
        "{{ property.model.name }}".to_string()
        {% endif %}
    }
    {% endfor %}
}

{{ e::model_object_impl(model = model, options = options) }}

{%- elif model.enum %}
#[derive({%- if model.enum.type == "number" %}serde_repr::Serialize_repr, serde_repr::Deserialize_repr{% else %}Deserialize, Serialize{% endif %}, Debug, Clone{% if not options.skipValidate %}, Validate{% endif %})]
{%- if model.enum.type == "number" %}
#[repr(u32)]
{%- endif %}
pub enum {{ m::model_name(name = model.enum.name) }}Variant {
    {% for option in model.enum.options -%}
    {% if option == option | when_numeric(prefix="n") | pascalcase -%}
    {{ option }},
    {%- elif model.enum.type == "number" %}
    {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name) ) }} = {{ option }},
    {%- elif option is matching("^[\d]+") %}
    #[serde(rename = "{{ option }}")]
    {%set a = 'Code' ~ option %}
    {{ m::enum_variant(name = a, base = m::model_name(name = a)) }},
    {%- else %}
    #[serde(rename = "{{ option }}")]
    {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name)) }},
    {% endif %}
    {%- endfor %}
}

impl std::string::ToString for {{ m::model_name(name = model.enum.name) }}Variant {
    fn to_string(&self) -> String {
        match self {
            {%- for option in model.enum.options %}
            Self::{%- if option == option | when_numeric(prefix="n") | pascalcase -%}
            {{ option }}
            {%- elif model.enum.type == "number" -%}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name) ) }}
            {%- elif option is matching("^[\d]+") -%}
            {% set a = 'Code' ~ option %}
            {{ m::enum_variant(name = a, base = m::model_name(name = a)) }}
            {%- else -%}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name)) }}
            {%- endif %} => "{{ option }}",
            {%- endfor %}
        }.to_string()
    }
}

impl std::str::FromStr for {{ m::model_name(name = model.enum.name) }}Variant {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            {%- for option in model.enum.options %}
            "{{ option }}" => Ok(Self::{%- if option == option | when_numeric(prefix="n") | pascalcase -%}
            {{ option }}
            {%- elif model.enum.type == "number" -%}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name) ) }}
            {%- elif option is matching("^[\d]+") -%}
            {% set a = 'Code' ~ option %}
            {{ m::enum_variant(name = a, base = m::model_name(name = a)) }}
            {%- else -%}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name)) }}
            {%- endif %}),
            {%- endfor %}
            _ => Err(())
        }
    }
}

{%- elif model.wrapper %}
{% if model.wrapper.strategy and model.wrapper.strategy == "externally" %}
#[derive(Debug, Clone, {% if not options.skipValidate %}Validate, {% endif %}Deserialize, Serialize)]
pub enum {{ m::model_name(name = model.wrapper.name) }} {
    {% for option in model.wrapper.models -%}
    #[serde(rename = "{{ option.x._discriminator.property }}")]
    {{ option.x._discriminator.property | pascalcase }}(
        {%- if option.x._discriminator.value.model -%}
        {{- m::enum_validation(option = option, options = options) }}
        {{ option.x._discriminator.value.model.name }}{% if option.x._discriminator.value.model.kind == 'string' %}Variant{% endif %}
        {%- elif option.x._discriminator.value.simple -%}
        {{- m::enum_validation(option = option, options = options) }}
        {{ m::type(property = option.x._discriminator.value.simple) }}
        {%- endif -%}
    ),
    {% endfor %}
}

{% elif model.wrapper.strategy.internally %}
#[derive(Debug, Clone, {% if not options.skipValidate %}Validate, {% endif %}Deserialize, Serialize)]
#[serde(tag = "{{ model.wrapper.strategy.internally }}")]
pub enum {{ m::model_name(name = model.wrapper.name) }} {
    {% for option in model.wrapper.models -%}
    #[serde(rename = "{{ option.x._discriminator.value.model.name }}")]
    {{ option.x._discriminator.value.model.name | pascalcase }}{% if option.x._discriminator.properties | default(value = 0) > 0 %}({{- m::enum_validation(option = option, options = options) }}{{ m::type(property = option) }}){% endif %},
    {% endfor %}
}

{% else -%}
#[derive(Debug, Clone, {% if not options.skipValidate %}Validate, {% endif %}Serialize, Deserialize)]
#[serde(untagged)]
pub enum {{ m::model_name(name = model.wrapper.name) }} {
    {% for option in model.wrapper.models -%}
    {{ m::type(property = option) | pascalcase }}(
        {{- m::enum_validation(option = option, options = options) }}
        {{ m::type(property = option) }}
    ),
    {% endfor %}
}

{% endif -%}

{%- elif model.primitive %}
pub type {{ m::model_name(name = model.primitive.name) }} = {{ m::type(property = model.primitive) }};
{% endif %}
{% endfor %}

pub fn optional_nullable<'de, T, D>(deserializer: D) -> Result<Option<T>, D::Error>
    where T: Deserialize<'de>,
          D: Deserializer<'de>
{
    Deserialize::deserialize(deserializer).map(Some)
}

{% block end %}{% endblock end %}

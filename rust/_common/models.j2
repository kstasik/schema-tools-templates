{% import "macros.j2" as m -%}
{% import "extensions.j2" as e -%}
{# if wrappers include #}
{{ m::do_not_modify() }}
use serde::{Serialize, Deserialize, Deserializer};
use std::collections::HashMap;
use validator::Validate;
use regex::Regex;
{% block use %}{% endblock use %}

{% if formats is containing("decimal") %}
use rust_decimal::Decimal;
{% endif %}
{% if formats is containing("date-time") %}
use chrono::{DateTime, Utc};
{% endif %}

lazy_static::lazy_static! {
   static ref UUID: Regex = Regex::new(r"^\b[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}\b$").unwrap();
   static ref FLOAT: Regex = Regex::new(r"^[0-9\.]+$").unwrap();
{% for regexp in regexps -%}
   static ref {{ regexp.name | snakecase | upper }}: Regex = Regex::new(r"{{ regexp.pattern }}").unwrap();
{% endfor %}
}

{% for model in models %}
{%- if model.object %}
#[derive(Deserialize, Serialize, Debug, Validate, Clone{% if model.object.properties | filter(attribute="required", value=true) | length == 0 %}, Default{% endif %})]
pub struct {{ m::model_name(name = model.object.name) }} {
    {%- set filtered_properties = model.object.properties | filter_not(attribute="type", value="const") -%}
    {% for property in filtered_properties -%}
    {% if property.validation and property.type != 'enum' %}
    {% if m::get_validation(validation = property.validation) | length %}
    #[validate({{ m::get_validation(validation = property.validation) }})]
    {% endif %}
    {% elif m::need_nested_validation(property=property)%}
    #[validate]
    {% endif %}
    #[serde(rename = "{{ property.name }}"{% if not property.required and property.nullable %}, default, deserialize_with = "optional_nullable"{% elif not property.required %}, skip_serializing_if = "Option::is_none"{% endif %})]
    pub {{ m::property_name(name = property.name) }}: {% if not property.required %}Option<{% endif %}{{ m::type(property = property) }}{% if not property.required %}>{% endif %},
    {%- endfor %}
}

impl {{ m::model_name(name = model.object.name) }} { {# if sort required first #}
    pub fn new({%- for property in filtered_properties -%}{{ m::property_name(name = property.name) }}: {% if not property.required %}Option<{% endif %}{{ m::type(property = property) }}{% if not property.required %}>{% endif %}, {% endfor %}) -> Self {
        Self {
            {% for property in filtered_properties %}{{ m::property_name(name = property.name) }},
            {% endfor %}
        }
    }

    {% for property in model.object.properties | filter(attribute="type", value="const") -%}
    // todo: add to serialization as static
    pub fn get_{{ m::property_name(name = property.name) }}(&self) -> {{ m::type(property = property.model) }} {
        {% if property.model.type == "string" %}
        "{{ property.model.name }}".to_string()
        {% endif %}
    }
    {% endfor %}
}

{{ e::model_object_impl(model = model, options = options) }}

{%- elif model.enum %}
#[derive({%- if model.enum.type == "number" %}serde_repr::Serialize_repr, serde_repr::Deserialize_repr{% else %}Deserialize, Serialize{% endif %}, Debug, Clone)]
{%- if model.enum.type == "number" %}
#[repr(u32)]
{%- endif %}
pub enum {{ m::model_name(name = model.enum.name) }}Variant {
    {% for option in model.enum.options -%}
    {% if option == option | when_numeric(prefix="n") | pascalcase -%}
    {{ option }},
    {%- elif model.enum.type == "number" %}
    {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name) ) }} = {{ option }},
    {%- elif option is matching("^[\d]+") %}
    #[serde(rename = "{{ option }}")]
    {%set a = 'Code' ~ option %}
    {{ m::enum_variant(name = a, base = m::model_name(name = a)) }},
    {%- else %}
    #[serde(rename = "{{ option }}")]
    {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name)) }},
    {% endif %}
    {%- endfor %}
}

impl std::string::ToString for {{ m::model_name(name = model.enum.name) }}Variant {
    fn to_string(&self) -> String {
        match self {
            {% for option in model.enum.options -%}
            Self::{% if option == option | when_numeric(prefix="n") | pascalcase -%}
            {{ option }}
            {%- elif model.enum.type == "number" %}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name) ) }}
            {%- elif option is matching("^[\d]+") %}
            {%set a = 'Code' ~ option %}
            {{ m::enum_variant(name = a, base = m::model_name(name = a)) }}
            {%- else %}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name)) }}
            {%- endif %} => "{{ option }}",
            {%- endfor %}
        }.to_string()
    }
}

impl std::str::FromStr for {{ m::model_name(name = model.enum.name) }}Variant {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            {% for option in model.enum.options -%}
            "{{ option }}" => Ok(Self::{% if option == option | when_numeric(prefix="n") | pascalcase -%}
            {{ option }}
            {%- elif model.enum.type == "number" %}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name) ) }}
            {%- elif option is matching("^[\d]+") %}
            {%set a = 'Code' ~ option %}
            {{ m::enum_variant(name = a, base = m::model_name(name = a)) }}
            {%- else %}
            {{ m::enum_variant(name = option, base = m::model_name(name = model.enum.name)) }}
            {%- endif %}),
            {%- endfor %}
            _ => Err(())
        }
    }
}

{%- elif model.wrapper %}
#[derive(Debug, Clone, Serialize)]
#[serde(untagged)]
pub enum {{ m::model_name(name = model.wrapper.name) }} {
    {% for option in model.wrapper.models -%}
    {{ m::type(property = option) }}({{ m::type(property = option) }}),
    {% endfor %}
}

impl<'de> Deserialize<'de> for {{ m::model_name(name = model.wrapper.name) }} {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where D: Deserializer<'de> {
        {% if model.wrapper.models | length == 1 %}
        {% for option in model.wrapper.models -%}
        {{ m::type(property = option) }}::deserialize(deserializer)
            .map(|t| Self::{{ m::type(property = option) }}(t))
        {% endfor %}
        {% else %}
        let data = &serde_json::Value::deserialize(deserializer)?;
        // todo: too many extra allocations - refactor
        {% for option in model.wrapper.models %}
        if let Ok(result) = serde_json::from_value::<{{ m::type(property = option) }}>(data.clone()) {
            return Ok(Self::{{ m::type(property = option) }}(result));
        }
        {% endfor %}

        Err(serde::de::Error::custom("Cannot deserialize wrapper"))
        {% endif %}
    }
}

impl Validate for {{ m::model_name(name = model.wrapper.name) }} {
    fn validate(&self) -> Result<(), validator::ValidationErrors> {
        match self {
            {% for option in model.wrapper.models -%}
            Self::{{ m::type(property = option) }}(d) =>{% if option.type == 'enum' %}Ok(()),{% else %}d.validate(),{% endif %}
            {% endfor %}
        }
    }
}

{%- elif model.primitive %}
pub type {{ m::model_name(name = model.primitive.name) }} = {{ m::type(property = model.primitive) }};
{% endif %}
{% endfor %}

pub fn optional_nullable<'de, T, D>(deserializer: D) -> Result<Option<T>, D::Error>
    where T: Deserialize<'de>,
          D: Deserializer<'de>
{
    Deserialize::deserialize(deserializer).map(Some)
}

{% block end %}{% endblock end %}
